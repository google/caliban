Getting Started with Google Cloud
=================================

This document will take you through the process of configuring your machine to
access Google Cloud. Once you're through you'll be able to submit jobs to Google
AI Platform using :doc:`../cli/caliban_cloud`.

Cloud Installation Overview
---------------------------

- Visit cloud.google.com, click get started for free.
- get set up, make the account...
- Make a project
- go enable AI Platform + Container Registry
  https://cloud.google.com/container-registry/docs/quickstart
- Make a service account key, download it, put it in a spot.
- install the GCloud SDK, get it authenticated

Add these:

export REGION="us-central1"
export PROJECT_ID="research-3141"
export GOOGLE_APPLICATION_CREDENTIALS="$HOME/.config/devkey.json"

BONUS:

- ADC credentials
- Make a bucket

Create a Project
----------------

First, create a new Cloud project. This is the space where every cloud job you
submit, and every instance you spin up, will live.

Go to the `Cloud Console <https://console.cloud.google.com>`_ and select the
dropdown to the right of "Google Cloud Platform". Choose "New Project" on the
dialogue that appears.

Give your project a name, in the "location" field, and use the "browse" button
to select "experimental-gke" as the project's location. The location of your
project modifies its permissions, so setting it properly is important. To enable
using Google Kubernetes Engine, you need to place your project in the
"experimental-gke" folder.

This should take you out to the project's dashboard. Note the project's ID in
the project info panel.

Add the following line to your ``~/.bashrc`` to make the ID available in later
commands:

.. code-block:: bash

   export PROJECT_ID=<your-project-id>

Next:

#. Make sure that billing is enabled for your project
   (\ `instructions here <https://cloud.google.com/billing/docs/how-to/modify-project>`_\ )
#. Enable the AI Platform ("Cloud Machine Learning Engine") and Compute Engine
   APIs
   `by selecting your prgreroject here <https://console.cloud.google.com/flows/enableapi?apiid=ml.googleapis.com,compute_component>`_.

Configuring Credentials
-----------------------

To interact with your new project, you'll need to configure two sets of
credentials:

#. The Cloud SDK credentials, which you'll use to spin up machines and submit
   model training jobs to Cloud
#. python credentials for Google Cloud.

GCloud SDK
^^^^^^^^^^

The Google Cloud SDK is a set of command line tools that you'll install on your
workspace. These communicate with Cloud using a stored set of credentials that
you'll generate with ``gcloud init``.

Visit the `Google Cloud SDK installation page
<https://cloud.google.com/sdk/install>`_ for a full set of instructions. Keep a
tab open with the information below to help you through the ``gcloud init``
step.

During ``gcloud init``\ , When you see this output:

.. code-block:: sh

   You are logged in as: [totoro@gmail.com].

   This account has a lot of projects! Listing them all can take a while.
    [1] Enter a project ID
    [2] Create a new project
    [3] List projects
   Please enter your numeric choice:

Enter ``1``\ , then type in your project ID from before (now stored under
``$PROJECT_ID``\ ).

If you'd like to set a default zone, I recommend anything beginning with
``us-central1`` as a sane choice. This region has
`the most capability <https://cloud.google.com/ml-engine/docs/regions>`_ of any
region; TPUs, the latest GPUs, you name it.

To check if everything was successful, run ``gcloud auth list`` in your
terminal. You should see output like this:

.. code-block:: sh

   [totoro@totoro ~]$ gcloud auth list
       Credentialed Accounts
   ACTIVE  ACCOUNT
   *       totoro@google.com

   To set the active account, run:
       $ gcloud config set account `ACCOUNT`

You might want to peruse the full set of `SDK documentation
<https://cloud.google.com/sdk/gcloud/reference/>`_ once you've got everything
working.

Service Account Key
^^^^^^^^^^^^^^^^^^^

If you want to access Cloud services from inside of the Docker containers
generated by Caliban, you may need to create a service account key.

When you run containers remotely with :doc:`../cli/caliban_cloud`, the code
inside your container can authenticate itelf using Google's "application default
credentials" mechanism. If you'd like to bake credentials into the container, you'll need to create a service account key.

(This is also necessary for more esoteric concerns, like installing ``pip``
dependencies inside your container from private Cloud Source Repositories.)

To create a service account key for authentication:

#. In the GCP Console, go to the
   `\ **Create service account key** <https://console.cloud.google.com/apis/credentials/serviceaccountkey?_ga=2.126245134.-201047487.1571450750&_gac=1.63762141.1572378670.CPShq_6ewuUCFYZogQodaXoJbw>`_
   page.
#. From the **Service account** drop-down list, select **New service account**.
#. Enter a name in the **Service account name** field.
#. From the **Role** drop-down list, select **Project > Owner**. This will give
   your service account all the access your account has on the project.
#. Click **Create** to download a JSON file containing your new key to your
   computer.

This key will let you perform any action using the ``gcloud`` CLI tool and Cloud
python SDK that you can perform from the browser dashboard, including running ML
jobs on AI platform and storing your generated models, data and measurements in
a Cloud bucket.

To make this key accessible to the Python Cloud SDK, you'll need to set the
``GOOGLE_APPLICATION_CREDENTIALS`` variable in your shell to the path of the new
JSON file.

This snippet will place your key in a sane location and add a line to your bash
config that will set this environment variable every time you create a new
shell. Run the following in a terminal on your workstation:

.. code-block:: bash

   mv [NEW_FILENAME].json ~/.config/service_key.json
   export GOOGLE_APPLICATION_CREDENTIALS=$HOME/.config/service_key.json >> ~/.bashrc

ADC Credentials
^^^^^^^^^^^^^^^

Instead of a service account key, you might also generate "Application Default
Credentials" on your machine.

To install these on your workstation, run

.. code-block:: bash

   gcloud auth application-default login

at your terminal, as described in `these gcloud docs
<https://cloud.google.com/sdk/gcloud/reference/auth/application-default/login>`_.
That's it!

Creating a Bucket
^^^^^^^^^^^^^^^^^

Next you'll create a Cloud bucket.

Your bucket is a reserved "folder" on the Cloud filesystem; you'll use this to
save models and measurements, and as a staging ground for model workflows you're
submitting to Cloud.

To create your bucket, add the following lines to your ``~/.bashrc`` file:

.. code-block:: bash

   export BUCKET_NAME="totoro_bucket"
   export REGION="us-central1"

Run ``source ~/.bashrc`` to pick up the changes, then run the following command
to create your new bucket:

.. code-block:: bash

   gsutil mb -l $REGION gs://$BUCKET_NAME

That's it. You're all set.
